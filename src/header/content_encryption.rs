use nom::number::streaming::le_u32;


#[derive(Debug, PartialEq)]
pub struct ContentEncryptionData<'a> {
    pub secret_data: &'a [u8],
    pub protection_type: &'a [u8],
    pub key_id: &'a [u8],
    pub license_url: &'a [u8],
}

impl<'a> ContentEncryptionData<'a> {
    named!(pub parse<ContentEncryptionData>,
        do_parse!(
            secret_data_length: le_u32 >>
            secret_data: take!(secret_data_length) >>
            protection_type_length: le_u32 >>
            protection_type: take!(protection_type_length) >>
            key_id_length: le_u32 >>
            key_id: take!(key_id_length) >>
            license_url_length: le_u32 >>
            license_url: take!(license_url_length) >>
            (ContentEncryptionData{
                secret_data,
                protection_type,
                key_id,
                license_url,
            })
        )
    );
}

#[cfg(test)]
mod tests {
    use crate::header::*;

    use super::*;

    #[test]
    fn basic_content_encryption() {
        assert_eq!(
            HeaderObject::parse(&[
                0xFB, 0xB3, 0x11, 0x22, 0x23, 0xBD, 0xD2, 0x11, 0xB4, 0xB7, 0x00, 0xA0,
                0xC9, 0x55, 0xFC, 0x6E, 0xBC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x18, 0x00, 0x00, 0x00, 0xB8, 0xE8, 0x9C, 0xBB, 0x79, 0x31, 0x80, 0x5C,
                0x3D, 0x7F, 0xDD, 0x00, 0xC5, 0x5C, 0xE9, 0xBA, 0x80, 0x3B, 0x1A, 0x5C,
                0xFB, 0x81, 0xDA, 0xF9, 0x04, 0x00, 0x00, 0x00, 0x44, 0x52, 0x4D, 0x00,
                0x19, 0x00, 0x00, 0x00, 0x4C, 0x35, 0x33, 0x6C, 0x51, 0x67, 0x74, 0x71,
                0x53, 0x41, 0x45, 0x63, 0x46, 0x36, 0x30, 0x35, 0x43, 0x54, 0x4F, 0x74,
                0x37, 0x59, 0x55, 0x6A, 0x00, 0x5F, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74,
                0x70, 0x3A, 0x2F, 0x2F, 0x67, 0x6F, 0x2E, 0x6D, 0x69, 0x63, 0x72, 0x6F,
                0x73, 0x6F, 0x66, 0x74, 0x2E, 0x63, 0x6F, 0x6D, 0x2F, 0x66, 0x77, 0x6C,
                0x69, 0x6E, 0x6B, 0x2F, 0x3F, 0x70, 0x72, 0x64, 0x3D, 0x38, 0x31, 0x36,
                0x26, 0x70, 0x76, 0x65, 0x72, 0x3D, 0x37, 0x2E, 0x31, 0x26, 0x73, 0x62,
                0x70, 0x3D, 0x44, 0x52, 0x4D, 0x26, 0x70, 0x6C, 0x63, 0x69, 0x64, 0x3D,
                0x30, 0x78, 0x34, 0x30, 0x39, 0x26, 0x63, 0x6C, 0x63, 0x69, 0x64, 0x3D,
                0x30, 0x78, 0x34, 0x30, 0x39, 0x26, 0x61, 0x72, 0x3D, 0x50, 0x65, 0x72,
                0x73, 0x6F, 0x6E, 0x61, 0x6C, 0x56, 0x32, 0x00,
            ]),
            Ok((&b""[..],
                HeaderObject::ContentEncryption(ContentEncryptionData {
                    secret_data: &[
                        0xB8, 0xE8, 0x9C, 0xBB, 0x79, 0x31, 0x80, 0x5C, 0x3D, 0x7F, 0xDD, 0x00,
                        0xC5, 0x5C, 0xE9, 0xBA, 0x80, 0x3B, 0x1A, 0x5C, 0xFB, 0x81, 0xDA, 0xF9,
                    ],
                    protection_type: &[0x44, 0x52, 0x4D, 0x00],
                    key_id: &[
                        0x4C, 0x35, 0x33, 0x6C, 0x51, 0x67, 0x74, 0x71, 0x53, 0x41, 0x45, 0x63,
                        0x46, 0x36, 0x30, 0x35, 0x43, 0x54, 0x4F, 0x74, 0x37, 0x59, 0x55, 0x6A,
                        0x00
                    ],
                    license_url: &[
                        0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x67, 0x6F, 0x2E, 0x6D, 0x69,
                        0x63, 0x72, 0x6F, 0x73, 0x6F, 0x66, 0x74, 0x2E, 0x63, 0x6F, 0x6D, 0x2F,
                        0x66, 0x77, 0x6C, 0x69, 0x6E, 0x6B, 0x2F, 0x3F, 0x70, 0x72, 0x64, 0x3D,
                        0x38, 0x31, 0x36, 0x26, 0x70, 0x76, 0x65, 0x72, 0x3D, 0x37, 0x2E, 0x31,
                        0x26, 0x73, 0x62, 0x70, 0x3D, 0x44, 0x52, 0x4D, 0x26, 0x70, 0x6C, 0x63,
                        0x69, 0x64, 0x3D, 0x30, 0x78, 0x34, 0x30, 0x39, 0x26, 0x63, 0x6C, 0x63,
                        0x69, 0x64, 0x3D, 0x30, 0x78, 0x34, 0x30, 0x39, 0x26, 0x61, 0x72, 0x3D,
                        0x50, 0x65, 0x72, 0x73, 0x6F, 0x6E, 0x61, 0x6C, 0x56, 0x32, 0x00,
                    ]
                }
            )))
        )
    }
}
